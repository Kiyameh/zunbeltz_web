---
import {groupLinksByCategory, type LinkItem} from '@/lib/groupLinksByCategory'

const url = Astro.request.url
const linkRecords: LinkItem[] = Astro.props.links
const linkTree = groupLinksByCategory(linkRecords)
let visibleTopic = true
---

<nav>
  <ul class="select-none space-y-1">
    {
      Object.entries(linkTree).map(
        ([tema, paginas]) => (
          (visibleTopic = paginas
            .map((pagina) => url.includes(pagina.link))
            .includes(true)),
          (
            <li>
              {/* Elemento tema */}
              <span class={`topic ${visibleTopic ? 'open-topic' : ''}`}>
                {tema}
              </span>
              {/* Cajón de páginas */}
              <ul class={`pages ${visibleTopic ? 'visible-pages' : ''}`}>
                {paginas.map((pagina) => (
                  /* Página con enlace */
                  <li
                    class={`page ${url.includes(pagina.link) ? 'selected' : ''}`}
                  >
                    <a
                      class="zunbeltz-anchor"
                      href={pagina.link}
                    >
                      {pagina.name}
                    </a>
                  </li>
                ))}
              </ul>
            </li>
          )
        )
      )
    }
  </ul>
</nav>

<style>
  /* Estilos de cada tema */
  .topic {
    display: flex;
    align-items: center;
    gap: 4px;
    cursor: pointer;
    position: relative;
    padding-left: 30px;
  }
  .topic::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 18px;
    height: 18px;
    transition: all 0.3s;
    background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="dimgrey" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-folder"><path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"/></svg>');
  }
  .open-topic::before {
    transition: all 0.4s;
    background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="dimgrey" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-folder-open"><path d="m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2"/></svg>');
  }

  /* Estilos del cajón de páginas */
  .pages {
    max-height: 0;
    margin-top: 2px;
    overflow: hidden;
    transition: max-height 0.8s ease-in-out;
  }
  .visible-pages {
    max-height: 100vh;
    transition: max-height 0.8s ease-in-out;
  }

  /* Estilos de cada enlace a página */
  .page {
    position: relative;
    margin-left: 25px;
    padding-left: 25px;
  }
  .selected {
    color: hsl(var(--primary));
  }
  .page::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 18px;
    height: 18px;
    background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="dimgrey" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file"><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"/><path d="M14 2v4a2 2 0 0 0 2 2h4"/></svg>');
  }
</style>

<script>
  document.querySelectorAll('.topic').forEach((toggler) => {
    toggler.addEventListener('click', function (this: HTMLElement) {
      // Cerrar otros temas
      document.querySelectorAll('.topic').forEach((otherToggler) => {
        if (otherToggler !== this) {
          const otherPageElement =
            otherToggler.parentElement?.querySelector('.pages')
          if (otherPageElement) {
            otherPageElement.classList.remove('visible-pages')
          }
          otherToggler.classList.remove('open-topic')
        }
      })
      // Intercambiar estado del tema
      const pagesElement = this.parentElement?.querySelector('.pages')
      if (pagesElement) {
        pagesElement.classList.toggle('visible-pages')
      }
      this.classList.toggle('open-topic')
    })
  })
</script>
